### I will be scraping the page from Wikipedia - https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M using BeautifulSoup and it request packages. 

## The first line of action is to take the first 3 items by filtering the the table in the link using class and pahaps 'td'

import requests
from bs4 import BeautifulSoup
r= requests.get("https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M")
soup = BeautifulSoup(r.content, "html.parser")
soup = soup.find_all("table", {"class":"wikitable sortable"})[0].find_all("td")
soup[0:3]

# We can see from the above output that 1,2 and 3rd tds are for Postcode, Borough and Neighborhood respectively. 
# So that analysis can be effective, transforming the data into pandas dataframe is imminent. 
# We need then to create empty dataframe and data.

import pandas as pd

df = pd.DataFrame(columns= ["Postcode", "Borough","Neighborhood"]) # empty dataframe

for i in range(len(soup)):  # len(soup) stands for number of postcode, borough and neighborhood combinations
     if i % 3==0:  
        df= df.append({'Postcode': soup[i].text, 
                        'Borough': soup[i+1].text, 
                        'Neighborhood': str(soup[i+2].text).replace("\n","")},ignore_index=True)

print("rows, columns:", df.shape)
df.head()

df.loc[df['Neighborhood'] == 'Not assigned','Neighborhood' ] =df.loc[df['Neighborhood'] == 'Not assigned','Borough' ]
df.iloc[8:9]


df.drop(df.loc[df['Borough']=='Not assigned'].index, inplace=True)
df.reset_index(inplace=True, drop=True)
print("rows, columns:", df.shape)
df.head()

# we can a neighborhood with defferent names. so we can put them into one with the following line of codes:
for j in range(1,len(df)):
    if df['Postcode'].iloc[j]==df['Postcode'].iloc[j-1] and df['Borough'].iloc[j]==df['Borough'].iloc[j-1]:
        df['Neighborhood'].iloc[j]=df['Neighborhood'].iloc[j] + ", " + df['Neighborhood'].iloc[j-1]
        

# delete the duplicated row

df['Repeat']=""  # add an artificial column 'Repeat' for duplicated items
for j in range(0,len(df)-1):
    if df['Postcode'].iloc[j]==df['Postcode'].iloc[j+1] and df['Borough'].iloc[j]==df['Borough'].iloc[j+1]:
        df['Repeat'].iloc[j]=1   # type 1 against rows to be deleted

df.drop(df.loc[df['Repeat']==1].index, inplace=True) # delete rows containing 1 under 'Repeat' column
df.drop(['Repeat'], axis=1, inplace=True)   # delete the 'Repeat' column since now there is nothing to do with it
df.reset_index(inplace=True, drop=True)

df.head(11)

#To know the number/rows of datafram, we call the shape method
print("rows, columns:", df.shape)
